filled.contour(test1$x, test1$y, test1$z,
color.palette = colorRampPalette(c("blue", "green", "yellow", "red")), # Custom color palette
main = "Aphids heatmap",
xlab = "Grid column", # Customize your axis label as needed
ylab = "Grid row", # Customize your axis label as needed
key.title = title(main = "# Aphids", cex.main = 1),
zlim = c(global_z_min, global_z_max))
interp_result2 <- interp(
x = aphid2$column_num,
y = aphid2$row_num,
z = aphid2$no_nymphs,
linear = F,  # Use linear interpolation; set to TRUE if you prefer linear interpolation
duplicate = "mean"
)
interp_result2 <- interp(
x = aphid2$column_num,
y = aphid2$row_num,
z = aphid2$no_nymphs,
linear = F,  # Use linear interpolation; set to TRUE if you prefer linear interpolation
duplicate = "mean"
)
global_z_max <- max(interp_result2$z, na.rm = T)
filled.contour(interp_result2$x, interp_result2$y, interp_result2$z,
color.palette = colorRampPalette(c("blue", "green", "yellow", "red")), # Custom color palette
main = "Aphids heatmap",
xlab = "Grid column", # Customize your axis label as needed
ylab = "Grid row", # Customize your axis label as needed
key.title = title(main = "# Aphids", cex.main = 1),
zlim = c(global_z_min, global_z_max))
aphids <- read.xlsx ("dispersal_data_analysis.xlsx")
aphids$treatmentfac <- as.factor(aphids$treatment)
aphids$day <- lubridate::as_date(aphids$day, origin="1899-12-30")
aphids <- aphids %>%
mutate(
column_num = as.numeric(factor(p_column, levels = letters[1:7])),
row_num = as.numeric(p_row)
)
aphid1 <- aphids[which(aphids$treatmentfac == "intercropping"),]
aphid2 <- aphids[which(aphids$treatmentfac == "mix"),]
aphid3 <- aphids[which(aphids$treatmentfac == "control w"),]
aphid4 <- aphids[which(aphids$treatmentfac == "control m") ,]
aphid1 <- aphid1[which(aphid1$days_after.release == 7),]
aphid2 <- aphid2[which(aphid2$days_after.release == 7),]
aphid3 <- aphid3[which(aphid3$days_after.release == 7),]
aphid4 <- aphid4[which(aphid4$days_after.release == 7),]
which(aphids$treatmentfac == "intercropping")
which(aphids$treatmentfac == "intercropping" &
aphid1$days_after.release == 7)
which(aphids$treatmentfac == "intercropping" &&
aphid1$days_after.release == 7)
aphids <- read.xlsx ("dispersal_data_analysis.xlsx")
aphids$treatmentfac <- as.factor(aphids$treatment)
aphids$day <- lubridate::as_date(aphids$day, origin="1899-12-30")
aphids <- aphids %>%
mutate(
column_num = as.numeric(factor(p_column, levels = letters[1:7])),
row_num = as.numeric(p_row)
)
intercropping <- aphids[which(aphids$treatmentfac == "intercropping"),]
mix <- aphids[which(aphids$treatmentfac == "mix"),]
controlw <- aphids[which(aphids$treatmentfac == "control w"),]
controlm <- aphids[which(aphids$treatmentfac == "control m") ,]
intercropping7 <- intercropping[which(intercropping$days_after.release == 7),]
mix7 <- mix[which(mix$days_after.release == 7),]
controlw7 <- controlw[which(controlw$days_after.release == 7),]
controlm7 <- controlm[which(controlm$days_after.release == 7),]
rm(aphids, intercropping, mix, controlw, controlm)
intercropping <- interp(
x = intercropping$column_num,
y = intercropping$row_num,
z = intercropping$no_nymphs,
linear = T,
duplicate = "mean"
)
intercropping7 <- interp(
x = intercropping7$column_num,
y = intercropping7$row_num,
z = intercropping7$no_nymphs,
linear = T,
duplicate = "mean"
)
intercropping7 <- interp(
x = intercropping7$column_num,
y = intercropping7$row_num,
z = intercropping7$no_nymphs,
linear = T,
duplicate = "mean"
)
intercropping7
## data setup ####
aphids <- read.xlsx ("dispersal_data_analysis.xlsx")
aphids$treatmentfac <- as.factor(aphids$treatment)
aphids$day <- lubridate::as_date(aphids$day, origin="1899-12-30")
aphids <- aphids %>%
mutate(
column_num = as.numeric(factor(p_column, levels = letters[1:7])),
row_num = as.numeric(p_row)
)
intercropping <- aphids[which(aphids$treatmentfac == "intercropping"),]
mix <- aphids[which(aphids$treatmentfac == "mix"),]
controlw <- aphids[which(aphids$treatmentfac == "control w"),]
controlm <- aphids[which(aphids$treatmentfac == "control m") ,]
intercropping7 <- intercropping[which(intercropping$days_after.release == 7),]
mix7 <- mix[which(mix$days_after.release == 7),]
controlw7 <- controlw[which(controlw$days_after.release == 7),]
controlm7 <- controlm[which(controlm$days_after.release == 7),]
rm(aphids, intercropping, mix, controlw, controlm)
intercropping7$column_num
intercropping7$row_num
intercropping7$no_nymphs
intercropping7 <- interp(
x = intercropping7$column_num,
y = intercropping7$row_num,
z = intercropping7$no_nymphs,
linear = T,
duplicate = "mean"
)
mix7$no_nymphs
mix7 <- interp(
x = mix7$column_num,
y = mix7$row_num,
z = mix7$no_nymphs,
linear = F,  # Use linear interpolation; set to TRUE if you prefer linear interpolation
duplicate = "mean"
)
controlw7 <- interp(
x = controlw7$column_num,
y = controlw7$row_num,
z = controlw7$no_nymphs,
linear = F  # Use linear interpolation; set to TRUE if you prefer linear interpolation
)
controlw7 <- interp(
x = controlw7$column_num,
y = controlw7$row_num,
z = controlw7$no_nymphs,
linear = F,
duplicate = "mean"
)
controlm7 <- interp(
x = controlm7$column_num,
y = controlm7$row_num,
z = controlm7$no_nymphs,
linear = F,
duplicate = "mean"
)
aphids <- aphids[!is.na(aphids$no_nymphs),]
## data setup ####
aphids <- read.xlsx ("dispersal_data_analysis.xlsx")
aphids <- aphids[!is.na(aphids$no_nymphs),]
## data setup ####
aphids <- read.xlsx ("dispersal_data_analysis.xlsx")
aphids <- aphids[!is.na(aphids$no_nymphs),]
aphids$treatmentfac <- as.factor(aphids$treatment)
aphids$day <- lubridate::as_date(aphids$day, origin="1899-12-30")
aphids <- aphids %>%
mutate(
column_num = as.numeric(factor(p_column, levels = letters[1:7])),
row_num = as.numeric(p_row)
)
intercropping <- aphids[which(aphids$treatmentfac == "intercropping"),]
mix <- aphids[which(aphids$treatmentfac == "mix"),]
controlw <- aphids[which(aphids$treatmentfac == "control w"),]
controlm <- aphids[which(aphids$treatmentfac == "control m") ,]
intercropping7 <- intercropping[which(intercropping$days_after.release == 7),]
mix7 <- mix[which(mix$days_after.release == 7),]
controlw7 <- controlw[which(controlw$days_after.release == 7),]
controlm7 <- controlm[which(controlm$days_after.release == 7),]
rm(aphids, intercropping, mix, controlw, controlm)
intercropping7 <- interp(
x = intercropping7$column_num,
y = intercropping7$row_num,
z = intercropping7$no_nymphs,
linear = T,
duplicate = "mean"
)
mix7 <- interp(
x = mix7$column_num,
y = mix7$row_num,
z = mix7$no_nymphs,
linear = F,
duplicate = "mean"
)
controlw7 <- interp(
x = controlw7$column_num,
y = controlw7$row_num,
z = controlw7$no_nymphs,
linear = F,
duplicate = "mean"
)
controlm7 <- interp(
x = controlm7$column_num,
y = controlm7$row_num,
z = controlm7$no_nymphs,
linear = F,
duplicate = "mean"
)
all_z_values <- c(intercropping7$z,
mix7$z,
controlw7$z,
controlm7$z)
# global_z_min <- min(all_z_values, na.rm = T)
global_z_min <- -.01
global_z_max <- max(all_z_values, na.rm = T)
filled.contour(intercropping7$x, intercropping7$y, intercropping7$z,
color.palette = colorRampPalette(c("blue", "green", "yellow", "red")), # Custom color palette
main = "Aphids heatmap",
xlab = "Grid column", # Customize your axis label as needed
ylab = "Grid row", # Customize your axis label as needed
key.title = title(main = "# Aphids", cex.main = 1),
zlim = c(global_z_min, global_z_max))
filled.contour(mix7$x, mix7$y, mix7$z,
color.palette = colorRampPalette(c("blue", "green", "yellow", "red")), # Custom color palette
main = "Aphids heatmap",
xlab = "Grid column", # Customize your axis label as needed
ylab = "Grid row", # Customize your axis label as needed
key.title = title(main = "# Aphids", cex.main = 1),
zlim = c(global_z_min, global_z_max))
filled.contour(controlw7$x, controlw7$y, controlw7$z,
color.palette = colorRampPalette(c("blue", "green", "yellow", "red")), # Custom color palette
main = "controlw7",
xlab = "Grid column", # Customize your axis label as needed
ylab = "Grid row", # Customize your axis label as needed
key.title = title(main = "# Aphids", cex.main = 1),
zlim = c(global_z_min, global_z_max))
filled.contour(controlm7$x, controlm7$y, controlm7$z,
color.palette = colorRampPalette(c("blue", "green", "yellow", "red")), # Custom color palette
main = "controlm7",
xlab = "Grid column", # Customize your axis label as needed
ylab = "Grid row", # Customize your axis label as needed
key.title = title(main = "# Aphids", cex.main = 1),
zlim = c(global_z_min, global_z_max))
filled.contour(intercropping7$x, intercropping7$y, intercropping7$z,
color.palette = colorRampPalette(c("blue", "green", "yellow", "red")), # Custom color palette
main = "intercropping7",
xlab = "Grid column", # Customize your axis label as needed
ylab = "Grid row", # Customize your axis label as needed
key.title = title(main = "# Aphids", cex.main = 1),
zlim = c(global_z_min, global_z_max))
filled.contour(mix7$x, mix7$y, mix7$z,
color.palette = colorRampPalette(c("blue", "green", "yellow", "red")), # Custom color palette
main = "mix7",
xlab = "Grid column", # Customize your axis label as needed
ylab = "Grid row", # Customize your axis label as needed
key.title = title(main = "# Aphids", cex.main = 1),
zlim = c(global_z_min, global_z_max))
filled.contour(controlw7$x, controlw7$y, controlw7$z,
color.palette = colorRampPalette(c("blue", "green", "yellow", "red")), # Custom color palette
main = "controlw7",
xlab = "Grid column", # Customize your axis label as needed
ylab = "Grid row", # Customize your axis label as needed
key.title = title(main = "# Aphids", cex.main = 1),
zlim = c(global_z_min, global_z_max))
filled.contour(controlm7$x, controlm7$y, controlm7$z,
color.palette = colorRampPalette(c("blue", "green", "yellow", "red")), # Custom color palette
main = "controlm7",
xlab = "Grid column", # Customize your axis label as needed
ylab = "Grid row", # Customize your axis label as needed
key.title = title(main = "# Aphids", cex.main = 1),
zlim = c(global_z_min, global_z_max))
filled.contour(intercropping7$x, intercropping7$y, intercropping7$z,
color.palette = colorRampPalette(c("blue", "green", "yellow", "red")), # Custom color palette
main = "intercropping7",
xlab = "Grid column", # Customize your axis label as needed
ylab = "Grid row", # Customize your axis label as needed
key.title = title(main = "# Aphids", cex.main = 1),
zlim = c(global_z_min, global_z_max))
global_z_max
filled.contour(intercropping7$x, intercropping7$y, intercropping7$z,
color.palette = colorRampPalette(c("blue", "green", "yellow", "red")), # Custom color palette
main = "intercropping7",
xlab = "Grid column", # Customize your axis label as needed
ylab = "Grid row", # Customize your axis label as needed
key.title = title(main = "# Aphids", cex.main = 1),
zlim = c(global_z_min, global_z_max))
filled.contour(mix7$x, mix7$y, mix7$z,
color.palette = colorRampPalette(c("blue", "green", "yellow", "red")), # Custom color palette
main = "mix7",
xlab = "Grid column", # Customize your axis label as needed
ylab = "Grid row", # Customize your axis label as needed
key.title = title(main = "# Aphids", cex.main = 1),
zlim = c(global_z_min, global_z_max))
filled.contour(controlw7$x, controlw7$y, controlw7$z,
color.palette = colorRampPalette(c("blue", "green", "yellow", "red")), # Custom color palette
main = "controlw7",
xlab = "Grid column", # Customize your axis label as needed
ylab = "Grid row", # Customize your axis label as needed
key.title = title(main = "# Aphids", cex.main = 1),
zlim = c(global_z_min, global_z_max))
filled.contour(controlm7$x, controlm7$y, controlm7$z,
color.palette = colorRampPalette(c("blue", "green", "yellow", "red")), # Custom color palette
main = "controlm7",
xlab = "Grid column", # Customize your axis label as needed
ylab = "Grid row", # Customize your axis label as needed
key.title = title(main = "# Aphids", cex.main = 1),
zlim = c(global_z_min, global_z_max))
7988+4173
24*27
30*27
setwd("D:/Dropbox/git-harper-data-science/website")
library(openxlsx)
data <- read.xlsx("28.xlsx")
setwd("D:/Dropbox/WORK/__Harper Adams/__COURSES/_C6010C17 International Pers Mgt Animal Popns/2023-2024/assessments/data ass2")
data <- read.xlsx("28.xlsx")
plot(Response~ Abundance_Invader, data = data)
cor.test(data$Response, data$Abundance_Invader,
method="spearman")
cor.test(data$Response, data$Abundance_Invader,
method="pearson")
summary(lm(data$Response~data$Abundance_Invader))
data <- read.xlsx("5.xlsx")
plot(Response~ Abundance_Invader, data = data)
cor.test(data$Response, data$Abundance_Invader,
method="pearson")
cor.test(data$Response, data$Abundance_Invader,
method="spearman")
summary(lm(data$Response~data$Abundance_Invader))
cor.test(data$Response, data$Abundance_Invader,
method="spearman")
data <- read.xlsx("24.xlsx")
plot(Response~ Abundance_Invader, data = data)
cor.test(data$Response, data$Abundance_Invader,
method="spearman")
data <- read.xlsx("10.xlsx")
plot(Response~ Abundance_Invader, data = data)
cor.test(data$Response, data$Abundance_Invader,
method="pearson")
cor.test(data$Response, data$Abundance_Invader,
method="spearman")
data <- read.xlsx("13.xlsx")
plot(Response~ Abundance_Invader, data = data)
cor.test(data$Response, data$Abundance_Invader,
method="spearman")
data <- read.xlsx("23.xlsx")
plot(Response~ Abundance_Invader, data = data)
cor.test(data$Response, data$Abundance_Invader,
method="spearman")
summary(lm(data$Response~data$Abundance_Invader))
data <- read.xlsx("18.xlsx")
plot(Response~ Abundance_Invader, data = data)
cor.test(data$Response, data$Abundance_Invader,
method="spearman")
summary(lm(data$Response~data$Abundance_Invader))
cor.test(data$Response, data$Abundance_Invader,
method="pearson")
data <- read.xlsx("20.xlsx")
plot(Response~ Abundance_Invader, data = data)
cor.test(data$Response, data$Abundance_Invader,
method="pearson")
cor.test(data$Response, data$Abundance_Invader,
method="spearman")
summary(lm(data$Response~data$Abundance_Invader))
4/25
X <- "CAN YOU GIVE ME A HINT?"
X %IN% LETTERS
X %in% LETTERS
LETTERS
X[i] %in% LETTERS
X[i]
X <- "CAN YOU GIVE ME A HINT?"
X[i] %in% LETTERS
X[1] %in% LETTERS
X[1]
# element is 2 letters les like C would  be A, A would be Y, N would be L, etc.
# I know I can use the following code to convert a single letter
h
# how can I convert X to a new vector where each
# element is 2 letters les like C would  be A, A would be Y, N would be L, etc.
# I know I can use the following code to convert a single letter
# but how can I apply this to the whole vector?
LETTERS[(which(LETTERS == X[1]) - 2) %% 26 + 1]
```
which(LETTERS == X[1])
# Define the vector
X <- "CAN YOU GIVE ME A HINT?"
# Helper function to shift a character 2 letters back
shift_char <- function(char) {
if (char %in% LETTERS) {
# Get the position in the alphabet
pos <- match(char, LETTERS)
# Shift position back by 2, wrapping around using modulo
new_pos <- (pos - 3) %% 26 + 1
# Get the new character
return(LETTERS[new_pos])
} else {
# Return the character as is if it's not a letter
return(char)
}
}
# Apply the helper function to each character in the string
shifted_string <- sapply(strsplit(X, NULL)[[1]], shift_char)
# Collapse the result back into a single string
result <- paste(shifted_string, collapse = "")
# Print the result
print(result)
# Define the vector
X <- "CAN YOU GIVE ME A HINT quacking in morse code?"
# Helper function to shift a character 2 letters back
shift_char <- function(char) {
if (char %in% LETTERS) {
# Get the position in the alphabet
pos <- match(char, LETTERS)
# Shift position back by 2, wrapping around using modulo
new_pos <- (pos - 3) %% 26 + 1
# Get the new character
return(LETTERS[new_pos])
} else {
# Return the character as is if it's not a letter
return(char)
}
}
# Apply the helper function to each character in the string
shifted_string <- sapply(strsplit(X, NULL)[[1]], shift_char)
# Collapse the result back into a single string
result <- paste(shifted_string, collapse = "")
# Print the result
print(result)
# Define the vector
X <- "CAN YOU GIVE ME A HINT QUACKING IN MORSE CODE?"
# Helper function to shift a character 2 letters back
shift_char <- function(char) {
if (char %in% LETTERS) {
# Get the position in the alphabet
pos <- match(char, LETTERS)
# Shift position back by 2, wrapping around using modulo
new_pos <- (pos - 3) %% 26 + 1
# Get the new character
return(LETTERS[new_pos])
} else {
# Return the character as is if it's not a letter
return(char)
}
}
# Apply the helper function to each character in the string
shifted_string <- sapply(strsplit(X, NULL)[[1]], shift_char)
# Collapse the result back into a single string
result <- paste(shifted_string, collapse = "")
# Print the result
print(result)
# Define the vector
X <- "QUACK THE PASSWORD IN MORSE CODE?"
# Helper function to shift a character 2 letters back
shift_char <- function(char) {
if (char %in% LETTERS) {
# Get the position in the alphabet
pos <- match(char, LETTERS)
# Shift position back by 2, wrapping around using modulo
new_pos <- (pos - 3) %% 26 + 1
# Get the new character
return(LETTERS[new_pos])
} else {
# Return the character as is if it's not a letter
return(char)
}
}
# Apply the helper function to each character in the string
shifted_string <- sapply(strsplit(X, NULL)[[1]], shift_char)
# Collapse the result back into a single string
result <- paste(shifted_string, collapse = "")
# Print the result
print(result)
# Define the vector
X <- "QUACK A HINT TO THE PASSWORD IN MORSE CODE?"
# Helper function to shift a character 2 letters back
shift_char <- function(char) {
if (char %in% LETTERS) {
# Get the position in the alphabet
pos <- match(char, LETTERS)
# Shift position back by 2, wrapping around using modulo
new_pos <- (pos - 3) %% 26 + 1
# Get the new character
return(LETTERS[new_pos])
} else {
# Return the character as is if it's not a letter
return(char)
}
}
# Apply the helper function to each character in the string
shifted_string <- sapply(strsplit(X, NULL)[[1]], shift_char)
# Collapse the result back into a single string
result <- paste(shifted_string, collapse = "")
# Print the result
print(result)
7500/650
?interp
data <- read.xlsx("resid.xlsx")
library(openxlsx)
library(lmerTest)
library(visreg)
## About the data ####
data <- read.xlsx("resid.xlsx")
setwd("D:/Dropbox/git-harper-data-science/website")
setwd("D:/Dropbox/git-harper-data-science/website/pages/2024-08-14 residuals")
## About the data ####
data <- read.xlsx("resid.xlsx")
## EDA ####
boxplot(LivCU~Farm, data = data)
boxplot(LivCU~Treatment, data = data)
d1 <- data[complete.cases(data),]
interaction.plot(x.factor = d1$Treatment,
trace.factor = d1$Farm,
response = log(d1$LivCU))
hist(data$LivCU)
hist(log(data$LivCU))
?iris
?randomforest
?randomForest
?randomForests
data(mtcars)
.05* 37.5
.05* 37.5*46
help(mtcars)
plot(mpg ~ disp, mtcars)
